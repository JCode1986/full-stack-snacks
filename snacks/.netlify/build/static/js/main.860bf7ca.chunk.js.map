{"version":3,"sources":["components/LoginForm.js","components/SnackForm.js","components/SnackList.js","components/SnackDetail.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","state","username","password","obtainTokens","bind","changeHandler","event","this","setState","target","name","value","preventDefault","axios","post","url","response","onSuccess","data","console","error","onSubmit","type","placeholder","onChange","Component","SnackForm","title","snack","description","submitHandler","cols","rows","defaultProps","snacks","map","key","id","SnackItem","to","onClick","onDelete","App","accessToken","refreshToken","loginHandler","createHandler","updateHandler","deleteHandler","renderSnackDetail","access","refresh","headers","Authorization","get","log","concat","path","put","delete","filter","snackId","parseInt","match","params","find","SnackDetail","className","exact","SnackList","render","React","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.860bf7ca.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst url = 'http://167.172.203.221:8000/api/';\n\nclass LoginForm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n        }\n        this.obtainTokens = this.obtainTokens.bind(this);\n        this.changeHandler = this.changeHandler.bind(this);\n    }\n\n    changeHandler(event) {\n        this.setState({\n            [event.target.name] : event.target.value\n        })\n    }\n\n\n    async obtainTokens(event) {\n\n        event.preventDefault();\n\n        try {\n            const response = await axios.post(url + 'token/', {\n                username: this.state.username,\n                password: this.state.password,\n            });\n\n            this.props.onSuccess(response.data);\n\n        } catch (error) {\n            console.error('ugh', error);\n        }\n\n\n    }\n\n    render() {\n        return (<>\n            <form onSubmit={this.obtainTokens}>\n                <input name=\"username\" type=\"text\" value={this.state.username} placeholder=\"username\" onChange={this.changeHandler}/>\n                <input name=\"password\" type=\"password\" value={this.state.password} placeholder=\"password\" onChange={this.changeHandler}/>\n                <button>ok</button>\n            </form>\n        </>)\n    }\n\n}\n\nexport default LoginForm;","import React, { Component } from 'react';\n\nclass SnackForm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: props.snack.title,\n            description: props.snack.description,\n        }\n        this.changeHandler = this.changeHandler.bind(this);\n        this.submitHandler = this.submitHandler.bind(this);\n    }\n\n    static defaultProps = {\n        snack: {\n            title: '',\n            description: '',\n        }\n    }\n\n    changeHandler(event) {\n\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    submitHandler(event) {\n        event.preventDefault();\n        const data = {...this.state};\n        this.props.onSubmit(data);\n        this.setState({\n            title: '',\n            description: ''\n        })\n    }\n\n    render() {\n        return (\n            <>\n                <form onSubmit={this.submitHandler}>\n                    <fieldset>\n                        <legend>\n                            Post\n                        </legend>\n                        <input name=\"title\" type=\"text\" placeholder=\"title\" value={this.state.title} onChange={this.changeHandler} />\n                        <textarea name=\"description\" placeholder=\"description\" cols=\"30\" rows=\"10\" value={this.state.description} onChange={this.changeHandler}></textarea>\n                        <button>ok</button>\n                    </fieldset>\n                </form>\n            </>\n        )\n    }\n}\n\nexport default SnackForm","import React from 'react'\nimport { Link } from \"react-router-dom\"\n\nimport SnackForm from './SnackForm'\n\n\nexport default props => (\n    <>\n        <h2>Snack List</h2>\n        <ul>\n            {props.snacks.map(snack => <SnackItem key={snack.id} snack={snack} />)}\n        </ul>\n        <SnackForm onSubmit={props.onSubmit} />\n    </>\n)\n\nconst SnackItem = props => (\n    <li>\n        <Link to={`/${props.snack.id}`}>\n            <p>\n                {props.snack.title}\n            </p>\n        </Link>\n    </li>\n)\n","import React from 'react'\nimport { Link } from \"react-router-dom\"\nimport SnackForm from './SnackForm'\n\n\nexport default props => (\n    <>\n        <Link to=\"/\"><p>Snack List</p></Link>\n        <button onClick={() => props.onDelete(props.snack.id)}>delete</button>\n        <SnackForm onSubmit={props.onSubmit} snack={props.snack} />\n    </>\n)","import React from 'react';\nimport axios from 'axios';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n  } from \"react-router-dom\";\n\nimport './App.scss';\nimport LoginForm from './components/LoginForm';\nimport SnackList from './components/SnackList';\nimport SnackDetail from './components/SnackDetail';\n\n\nconst url = 'http://167.172.203.221:8000/api/';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            accessToken: '',\n            refreshToken:'',\n            snacks: null,\n        }\n        this.loginHandler = this.loginHandler.bind(this);\n        this.createHandler = this.createHandler.bind(this);\n        this.updateHandler = this.updateHandler.bind(this);\n        this.deleteHandler = this.deleteHandler.bind(this);\n        this.renderSnackDetail = this.renderSnackDetail.bind(this);\n    }\n\n    async loginHandler({access, refresh}) {\n        this.setState({\n            accessToken : access,\n            refreshToken : refresh,\n        });\n\n        try {\n            const headers = {\n                headers: {\n                    Authorization: `Bearer ${this.state.accessToken}`\n                }\n            }\n            const response = await axios.get(url + 'v1/', headers);\n\n            console.log(response.data);\n\n            this.setState({\n                snacks: response.data\n            });\n\n        } catch (error) {\n            console.error('ruhroh');\n        }\n\n    }\n\n    async createHandler(data) {\n\n        const headers = {\n            headers: {\n                Authorization: `Bearer ${this.state.accessToken}`\n            }\n        }\n\n        const response = await axios.post(url + 'v1/', data, headers);\n\n        console.log(response.data);\n\n        this.setState({\n            snacks: this.state.snacks.concat(response.data)\n        })\n\n\n    }\n\n    async updateHandler(data) {\n\n        const headers = {\n            headers: {\n                Authorization: `Bearer ${this.state.accessToken}`\n            }\n        }\n\n        const path = `${url}v1/${data.id}`;\n\n        console.log('path', path);\n        const response = await axios.put(path, data, headers);\n\n        console.log(response.data);\n\n        this.setState({\n            snacks: this.state.snacks.map(snack => {\n                if (snack.id === data.id) {\n                    return data;\n                } else {\n                    return snack;\n                }\n            })\n        })\n\n    }\n\n    async deleteHandler(id) {\n\n        const headers = {\n            headers: {\n                Authorization: `Bearer ${this.state.accessToken}`\n            }\n        }\n\n        const path = `${url}v1/${id}`;\n\n        console.log('path', path);\n\n        const response = await axios.delete(path, headers);\n\n        console.log(response.data);\n\n        this.setState({\n            snacks: this.state.snacks.filter(snack => snack.id !== id)\n        })\n\n    }\n\n    renderSnackDetail(props) {\n\n        if (!this.state.accessToken) {\n            return <Redirect to=\"/\" />\n        }\n\n        const snackId = parseInt(props.match.params.id);\n\n        const snack = this.state.snacks && this.state.snacks.find(snack => snack.id === snackId);\n\n        if (snack) {\n            return <SnackDetail snack={snack} onSubmit={this.updateHandler} onDelete={this.deleteHandler} />\n        } else {\n            return <Redirect to=\"/\" />\n        }\n    }\n\n\n    render() {\n        return (\n            <Router>\n\n            <div className=\"App\">\n\n                <Switch>\n\n                    <Route exact path=\"/\">\n\n                        {this.state.snacks ?\n                            <SnackList snacks={this.state.snacks} onSubmit={this.createHandler} /> :\n                            <LoginForm onSuccess={this.loginHandler} />}\n\n                    </Route>\n\n                    <Route path=\"/:id\" render={this.renderSnackDetail} />\n\n                </Switch>\n\n            </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}